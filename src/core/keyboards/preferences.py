"""Preferences-related keyboard layouts."""

from typing import Dict
from telegram import InlineKeyboardMarkup

from .base import create_keyboard, ButtonData

PREFERENCES_BUTTONS = {
    "language": {
        "text": {"en": "üåê Interface Language", "ru": "üåê –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"},
        "callback_data": "show_language_from_prefs",
    },
    "summary_language": {
        "text": {"en": "üìù Summary Language", "ru": "üìù –Ø–∑—ã–∫ —Ä–µ–∑—é–º–µ"},
        "callback_data": "show_summary_language",
    },
    "summary_length": {
        "text": {"en": "üìè Summary Length", "ru": "üìè –î–ª–∏–Ω–∞ —Ä–µ–∑—é–º–µ"},
        "callback_data": "show_length_options",
    },
    "audio_settings": {
        "text": {"en": "üéß Audio Settings", "ru": "üéß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É–¥–∏–æ"},
        "callback_data": "audio_settings",
    },
    "back": {
        "text": {"en": "‚¨ÖÔ∏è Back", "ru": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"},
        "callback_data": "back_to_menu",
    },
}

LANGUAGE_OPTIONS = {
    "en": {
        "text": {"en": "üá¨üáß English", "ru": "üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–π"},
        "callback_data": "lang_en",
    },
    "ru": {
        "text": {"en": "üá∑üá∫ Russian", "ru": "üá∑üá∫ –†—É—Å—Å–∫–∏–π"},
        "callback_data": "lang_ru",
    },
    "es": {
        "text": {"en": "üá™üá∏ Spanish", "ru": "üá™üá∏ –ò—Å–ø–∞–Ω—Å–∫–∏–π"},
        "callback_data": "lang_es",
    },
    "fr": {
        "text": {"en": "üá´üá∑ French", "ru": "üá´üá∑ –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π"},
        "callback_data": "lang_fr",
    },
    "de": {
        "text": {"en": "üá©üá™ German", "ru": "üá©üá™ –ù–µ–º–µ—Ü–∫–∏–π"},
        "callback_data": "lang_de",
    },
    "it": {
        "text": {"en": "üáÆüáπ Italian", "ru": "üáÆüáπ –ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π"},
        "callback_data": "lang_it",
    },
    "pt": {
        "text": {"en": "üáµüáπ Portuguese", "ru": "üáµüáπ –ü–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π"},
        "callback_data": "lang_pt",
    },
    "nl": {
        "text": {"en": "üá≥üá± Dutch", "ru": "üá≥üá± –ì–æ–ª–ª–∞–Ω–¥—Å–∫–∏–π"},
        "callback_data": "lang_nl",
    },
    "pl": {
        "text": {"en": "üáµüá± Polish", "ru": "üáµüá± –ü–æ–ª—å—Å–∫–∏–π"},
        "callback_data": "lang_pl",
    },
    "uk": {
        "text": {"en": "üá∫üá¶ Ukrainian", "ru": "üá∫üá¶ –£–∫—Ä–∞–∏–Ω—Å–∫–∏–π"},
        "callback_data": "lang_uk",
    },
    "tr": {
        "text": {"en": "üáπüá∑ Turkish", "ru": "üáπüá∑ –¢—É—Ä–µ—Ü–∫–∏–π"},
        "callback_data": "lang_tr",
    },
    "ar": {
        "text": {"en": "üá∏üá¶ Arabic", "ru": "üá∏üá¶ –ê—Ä–∞–±—Å–∫–∏–π"},
        "callback_data": "lang_ar",
    },
    "hi": {
        "text": {"en": "üáÆüá≥ Hindi", "ru": "üáÆüá≥ –•–∏–Ω–¥–∏"},
        "callback_data": "lang_hi",
    },
    "bn": {
        "text": {"en": "üáßüá© Bengali", "ru": "üáßüá© –ë–µ–Ω–≥–∞–ª—å—Å–∫–∏–π"},
        "callback_data": "lang_bn",
    },
    "ja": {
        "text": {"en": "üáØüáµ Japanese", "ru": "üáØüáµ –Ø–ø–æ–Ω—Å–∫–∏–π"},
        "callback_data": "lang_ja",
    },
    "ko": {
        "text": {"en": "üá∞üá∑ Korean", "ru": "üá∞üá∑ –ö–æ—Ä–µ–π—Å–∫–∏–π"},
        "callback_data": "lang_ko",
    },
    "zh": {
        "text": {"en": "üá®üá≥ Chinese", "ru": "üá®üá≥ –ö–∏—Ç–∞–π—Å–∫–∏–π"},
        "callback_data": "lang_zh",
    },
}

LENGTH_OPTIONS = {
    "short": {
        "text": {"en": "üìÑ Short", "ru": "üìÑ –ö—Ä–∞—Ç–∫–æ–µ"},
        "callback_data": "set_length_short",
    },
    "medium": {
        "text": {"en": "üìë Medium", "ru": "üìë –°—Ä–µ–¥–Ω–µ–µ"},
        "callback_data": "set_length_medium",
    },
    "detailed": {
        "text": {"en": "üìö Detailed", "ru": "üìö –ü–æ–¥—Ä–æ–±–Ω–æ–µ"},
        "callback_data": "set_length_detailed",
    },
}

AUDIO_OPTIONS = {
    "enabled": {
        "text": {"en": "üîä Enable Audio", "ru": "üîä –í–∫–ª—é—á–∏—Ç—å –∞—É–¥–∏–æ"},
        "callback_data": "set_audio_enabled",
    },
    "disabled": {
        "text": {"en": "üîá Disable Audio", "ru": "üîá –û—Ç–∫–ª—é—á–∏—Ç—å –∞—É–¥–∏–æ"},
        "callback_data": "set_audio_disabled",
    },
}

VOICE_GENDER_OPTIONS = {
    "male": {
        "text": {"en": "üë® Male Voice", "ru": "üë® –ú—É–∂—Å–∫–æ–π –≥–æ–ª–æ—Å"},
        "callback_data": "set_voice_male",
    },
    "female": {
        "text": {"en": "üë© Female Voice", "ru": "üë© –ñ–µ–Ω—Å–∫–∏–π –≥–æ–ª–æ—Å"},
        "callback_data": "set_voice_female",
    },
}


def create_preferences_keyboard(
    language: str, is_pro: bool = False
) -> InlineKeyboardMarkup:
    """Create keyboard for preferences menu."""
    buttons = [
        [PREFERENCES_BUTTONS["language"]],
        [PREFERENCES_BUTTONS["summary_language"]],
        [PREFERENCES_BUTTONS["summary_length"]],
    ]

    # Add pro-only buttons if user is pro
    if is_pro:
        buttons.append([PREFERENCES_BUTTONS["audio_settings"]])

    buttons.append([PREFERENCES_BUTTONS["back"]])
    return create_keyboard(buttons, language)


def create_language_selection_keyboard(
    language: str, setting_type: str = "interface", source: str = "preferences"
) -> InlineKeyboardMarkup:
    """Create keyboard for language selection.

    Args:
        language: Interface language
        setting_type: Type of language setting ('interface' or 'summary')
        source: Where the menu was opened from ('preferences' or 'main_menu')
    """
    # For interface language, only show English and Russian
    if setting_type == "interface":
        buttons = [
            [LANGUAGE_OPTIONS["en"]],
            [LANGUAGE_OPTIONS["ru"]],
        ]
    else:
        # For summary, show all supported languages in a grid
        buttons = []
        row = []
        for i, (lang_code, lang_data) in enumerate(LANGUAGE_OPTIONS.items()):
            row.append(lang_data)
            if len(row) == 2 or i == len(LANGUAGE_OPTIONS) - 1:
                buttons.append(row)
                row = []

    # Add back button with appropriate callback based on source
    back_callback = "back_to_menu" if source == "main_menu" else "back_to_preferences"
    buttons.append([{**PREFERENCES_BUTTONS["back"], "callback_data": back_callback}])

    # Update callback data based on setting type
    if setting_type != "interface":
        for row in buttons[:-1]:  # Skip back button
            for button in row:
                original_lang = button["callback_data"].split("_")[-1]
                button["callback_data"] = f"set_{setting_type}_lang_{original_lang}"

    return create_keyboard(buttons, language)


def create_length_selection_keyboard(language: str) -> InlineKeyboardMarkup:
    """Create keyboard for summary length selection."""
    buttons = [
        [LENGTH_OPTIONS["short"]],
        [LENGTH_OPTIONS["medium"]],
        [LENGTH_OPTIONS["detailed"]],
        [{**PREFERENCES_BUTTONS["back"], "callback_data": "back_to_preferences"}],
    ]
    return create_keyboard(buttons, language)


def create_audio_settings_keyboard(
    language: str, audio_enabled: bool = False, current_gender: str = "female"
) -> InlineKeyboardMarkup:
    """Create keyboard for audio settings.

    Args:
        language: Interface language
        audio_enabled: Whether audio is currently enabled
        current_gender: Current voice gender selection ('male' or 'female')
    """
    buttons = [
        # Audio toggle button
        [AUDIO_OPTIONS["disabled" if audio_enabled else "enabled"]],
        # Voice gender selection - show both options, highlight current
        [
            {
                **VOICE_GENDER_OPTIONS["male"],
                "text": (
                    {"en": "üë® Male Voice ‚úì", "ru": "üë® –ú—É–∂—Å–∫–æ–π –≥–æ–ª–æ—Å ‚úì"}
                    if current_gender == "male"
                    else VOICE_GENDER_OPTIONS["male"]["text"]
                ),
            },
            {
                **VOICE_GENDER_OPTIONS["female"],
                "text": (
                    {"en": "üë© Female Voice ‚úì", "ru": "üë© –ñ–µ–Ω—Å–∫–∏–π –≥–æ–ª–æ—Å ‚úì"}
                    if current_gender == "female"
                    else VOICE_GENDER_OPTIONS["female"]["text"]
                ),
            },
        ],
        # Language selection button
        [
            {
                "text": {"en": "üåê Voice Language", "ru": "üåê –Ø–∑—ã–∫ –≥–æ–ª–æ—Å–∞"},
                "callback_data": "show_voice_language",
            }
        ],
        # Demo button
        [
            {
                "text": {"en": "üéß Try Voice", "ru": "üéß –ü—Ä–æ—Å–ª—É—à–∞—Ç—å"},
                "callback_data": "voice_demo",
            }
        ],
        # Back button
        [{**PREFERENCES_BUTTONS["back"], "callback_data": "back_to_preferences"}],
    ]
    return create_keyboard(buttons, language)
